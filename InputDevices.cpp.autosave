#include <QString>
#include <QByteArray>
#include <QTextStream>
#include "Util.h"
#include "Constants.h"
#include "Devices.h"

#define DI Devices::InputDevices
#define DII DI::InputDevice

DII::InputDevice()
{
}

DII::InputDevice(const QString &name_, const QString &connectedTo_, const int bus_, const int vendor_,
                 const int product_, const int version_, const DII::TypeOfInputDevice type_) : name(name_),
                 connectedTo(connectedTo_), bus(bus_), vendor(vendor_), product(product_), version(version_),
                 type(type_)
{
}





void DI::_update()
{
    QByteArray arr = getOutputConsole("/proc/bus/input/devices");
    if(arr.isEmpty())
    {
        return;
    }
    QTextStream stream(&arr);
    QString line, name, connectedTo;
    int bus, vendor, product, version;
    DII::TypeOfInputDevice type;
    while(!stream.atEnd())
    {
        line = stream.readLine();
        switch (line.at(0))
        {
        case 'N':
            name = line;
            break;
        case 'P':
            phys = g_strdup(tmp + strlen("P: Phys="));
            break;
        case 'I':
            sscanf(tmp, "I: Bus=%x Vendor=%x Product=%x Version=%x",
                   &bus, &vendor, &product, &version);
            break;
        case 'H':
            if (line.indexOf("kbd") != -1)
                type = DII::KEYBOARD;		//INPUT_KEYBOARD;
            else if (line.indexOf("js") != -1)
                type = DII::JOYSTICK;		//INPUT_JOYSTICK;
            else if (line.indexOf("mouse") != -1)
                type = DII::MOUSE;		//INPUT_MOUSE;
            else
                type = DII::UNKNOWN;		//INPUT_UNKNOWN;
            break;
        case '\n':
            if (!name.isEmpty() && name.indexOf("PC Speaker") != -1) 
            {
                type = DII::PCSPKR;		// INPUT_PCSPKR
            }
            
            tmp = g_strdup_printf("INP%d", ++n);
            input_list = h_strdup_cprintf("$%s$%s=\n",
                                          input_list,
                                          tmp, name);
            input_icons = h_strdup_cprintf("Icon$%s$%s=%s\n",
                                           input_icons,
                                           tmp, name,
                                           input_devices[d].icon);
            gchar *strhash = g_strdup_printf("[Device Information]\n"
                                             "Name=%s\n"
                                             "Type=%s\n"
                                             "Bus=0x%x\n",
                                             name,
                                             input_devices[d].name,
                                             bus);
            
            const QString url = VendorList
            if (url)
            {
                strhash = h_strdup_cprintf("Vendor=%s (%s)\n",
                                           strhash,
                                           vendor_get_name(name),
                                           url);
            } else {
                strhash = h_strdup_cprintf("Vendor=%x\n",
                                           strhash,
                                           vendor);
            }
            
            strhash = h_strdup_cprintf("Product=0x%x\n"
                                       "Version=0x%x\n",
                                       strhash, product, version);
            
            if (phys && phys[1] != 0) {
                strhash = h_strdup_cprintf("Connected to=%s\n",
                                           strhash, phys);
            }
            
            if (phys && strstr(phys, "ir")) {
                strhash = h_strdup_cprintf("InfraRed port=yes\n",
                                           strhash);
            }
            
            moreinfo_add_with_prefix("DEV", tmp, strhash);
        }
    }
}


